/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as appRouteRouteImport } from './routes/(app)/route'
import { Route as appIndexRouteImport } from './routes/(app)/index'
import { Route as appVacationRentalsRouteImport } from './routes/(app)/vacation-rentals'
import { Route as appTravelRouteImport } from './routes/(app)/travel'
import { Route as appHotelsRouteImport } from './routes/(app)/hotels'
import { Route as appFlightsRouteImport } from './routes/(app)/flights'

const appRouteRoute = appRouteRouteImport.update({
  id: '/(app)',
  getParentRoute: () => rootRouteImport,
} as any)
const appIndexRoute = appIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => appRouteRoute,
} as any)
const appVacationRentalsRoute = appVacationRentalsRouteImport.update({
  id: '/vacation-rentals',
  path: '/vacation-rentals',
  getParentRoute: () => appRouteRoute,
} as any)
const appTravelRoute = appTravelRouteImport.update({
  id: '/travel',
  path: '/travel',
  getParentRoute: () => appRouteRoute,
} as any)
const appHotelsRoute = appHotelsRouteImport.update({
  id: '/hotels',
  path: '/hotels',
  getParentRoute: () => appRouteRoute,
} as any)
const appFlightsRoute = appFlightsRouteImport.update({
  id: '/flights',
  path: '/flights',
  getParentRoute: () => appRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof appIndexRoute
  '/flights': typeof appFlightsRoute
  '/hotels': typeof appHotelsRoute
  '/travel': typeof appTravelRoute
  '/vacation-rentals': typeof appVacationRentalsRoute
}
export interface FileRoutesByTo {
  '/flights': typeof appFlightsRoute
  '/hotels': typeof appHotelsRoute
  '/travel': typeof appTravelRoute
  '/vacation-rentals': typeof appVacationRentalsRoute
  '/': typeof appIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(app)': typeof appRouteRouteWithChildren
  '/(app)/flights': typeof appFlightsRoute
  '/(app)/hotels': typeof appHotelsRoute
  '/(app)/travel': typeof appTravelRoute
  '/(app)/vacation-rentals': typeof appVacationRentalsRoute
  '/(app)/': typeof appIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/flights' | '/hotels' | '/travel' | '/vacation-rentals'
  fileRoutesByTo: FileRoutesByTo
  to: '/flights' | '/hotels' | '/travel' | '/vacation-rentals' | '/'
  id:
    | '__root__'
    | '/(app)'
    | '/(app)/flights'
    | '/(app)/hotels'
    | '/(app)/travel'
    | '/(app)/vacation-rentals'
    | '/(app)/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  appRouteRoute: typeof appRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/': {
      id: '/(app)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appIndexRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/vacation-rentals': {
      id: '/(app)/vacation-rentals'
      path: '/vacation-rentals'
      fullPath: '/vacation-rentals'
      preLoaderRoute: typeof appVacationRentalsRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/travel': {
      id: '/(app)/travel'
      path: '/travel'
      fullPath: '/travel'
      preLoaderRoute: typeof appTravelRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/hotels': {
      id: '/(app)/hotels'
      path: '/hotels'
      fullPath: '/hotels'
      preLoaderRoute: typeof appHotelsRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/flights': {
      id: '/(app)/flights'
      path: '/flights'
      fullPath: '/flights'
      preLoaderRoute: typeof appFlightsRouteImport
      parentRoute: typeof appRouteRoute
    }
  }
}

interface appRouteRouteChildren {
  appFlightsRoute: typeof appFlightsRoute
  appHotelsRoute: typeof appHotelsRoute
  appTravelRoute: typeof appTravelRoute
  appVacationRentalsRoute: typeof appVacationRentalsRoute
  appIndexRoute: typeof appIndexRoute
}

const appRouteRouteChildren: appRouteRouteChildren = {
  appFlightsRoute: appFlightsRoute,
  appHotelsRoute: appHotelsRoute,
  appTravelRoute: appTravelRoute,
  appVacationRentalsRoute: appVacationRentalsRoute,
  appIndexRoute: appIndexRoute,
}

const appRouteRouteWithChildren = appRouteRoute._addFileChildren(
  appRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  appRouteRoute: appRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
